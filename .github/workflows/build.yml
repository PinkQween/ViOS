name: Build OS

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies and cross-compiler
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-multilib g++-multilib nasm wget bison flex

          wget https://github.com/lordmilko/i686-elf-tools/releases/download/13.2.0/i686-elf-tools-linux.zip
          unzip i686-elf-tools-linux.zip -d i686-elf-tools
          sudo mv i686-elf-tools /usr/local/i686-elf-tools
          sudo ln -sf /usr/local/i686-elf-tools/bin/* /usr/local/bin/

          i686-elf-gcc --version
          i686-elf-ld --version
          nasm -v

      - name: Build OS
        run: |
          make clean
          # Build with ViOS libc (will install locally if needed)
          ./build.sh build
          # Debug: Check if ViOS libc was built
          echo "Checking ViOS libc installation..."
          ls -la external/ViOS-libc/include/ || echo "ViOS libc include directory not found"
          ls -la external/ViOS-libc/lib/ || echo "ViOS libc lib directory not found"
          # Debug: Check system-wide installation
          echo "Checking system-wide ViOS libc..."
          ls -la /opt/ViOS/ || echo "System-wide ViOS libc not found"
          # Debug: Test the Makefile detection logic
          echo "Testing Makefile detection logic..."
          cd assets/programs/cpp_test
          echo "Testing if /opt/ViOS/lib/libViOSlibc.a exists:"
          if [ -f "/opt/ViOS/lib/libViOSlibc.a" ]; then
            echo "System-wide libc found"
          else
            echo "System-wide libc not found, should use local"
          fi
          echo "VIOS_LIBC_PATH would be:"
          if [ -f "/opt/ViOS/lib/libViOSlibc.a" ]; then
            echo "/opt/ViOS"
          else
            echo "../../external/ViOS-libc"
          fi
          echo "Current directory: $(pwd)"
          echo "Checking if ../../external/ViOS-libc/include exists:"
          ls -la ../../external/ViOS-libc/include/ || echo "Local include directory not found"
          echo "Checking if ../../external/ViOS-libc/include/stdio.h exists:"
          ls -la ../../external/ViOS-libc/include/stdio.h || echo "stdio.h not found"

      - name: Sanitize tag name
        if: startsWith(github.ref, 'refs/tags/')
        id: sanitize_tag
        run: |
          SAFE_TAG_NAME=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '_')
          echo "safe_tag_name=$SAFE_TAG_NAME" >> $GITHUB_ENV
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Rename OS binary to include sanitized tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          sudo mv ./bin/os.bin ./bin/os-${safe_tag_name}.bin
          sudo chown $USER:$USER ./bin/os-${safe_tag_name}.bin

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Build OS ${{ github.ref_name }}
          files: ./bin/os-${{ env.safe_tag_name }}.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          safe_tag_name: ${{ env.safe_tag_name }}
